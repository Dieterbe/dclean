#!/bin/bash

# main program
# -d directory (mandatory)
# -o order criterion. must be one of: atime, mtime, ctime, size (default size)
# -s: skip clean and ignored files (files which are in a VCS but are not modified or ignored)

source `dirname $0`/lib-dclean
dclean_args=("$@") # used later when recursively calling self (descending into dirs)

order=size
skipclean=0
while getopts "d:o:s" OPTION
do
	case $OPTION in
	d)
		dir=$OPTARG
		;;
	o)
		order=$OPTARG
		;;
	s)
		skipclean=1
		;;
	esac

done

[ -z "$dir" -o ! -r "$dir" -o ! -d "$dir" ] && die_error "-d must be a readable directory. not: $dir"

orders=(atime mtime ctime size)
check_is_in $order "${orders[@]}" || die_error "-o must be one of: $orders (defaults to size). not: $order"

is_svn $dir    && type=svn    && echo "detected svn dir"
is_git $dir    && type=git    && echo "detected git dir"
[ -z "$type" ] && type=normal && echo "detected non-vcs dir"

# find is great because of its good conditionals, but lacks support for ordering
# ls is good for ordering files, but has no conditionals
# the following trick gives us what we need, albeit not the most efficient.

var_size=s # bytes
var_atime=X
var_mtime=Y
var_ctime=Z
variable=var_$order
var=${!variable}

sort_order= # small -> big (oldest first)
if [ $order == size ]
then
	sort_order='-r' # big -> small (bigger files first)
fi

OLD_IFS=$IFS
IFS=$'\n'
for i in `find "$dir" -maxdepth 1 -mindepth 1 -exec stat -c "%$var %n" {} + | sort -n $sort_order | sed 's/[^ ]* //'`
do
	#TODO printf with nice columns
	echo -n "$i .."
	state=
	# skip VCS metadata directories
	[[ $i =~ /.svn$ ]] && echo "skipping because it's a VCS dir" && continue
	[[ $i =~ /.git$ ]] && echo "skipping because it's a VCS dir" && continue
	if [ ! -r "$i" ]
	then
		echo "no read permissions. skipping.."
		continue
	fi
	if [ $type = normal ]
	then
		echo "not a versioncontrolled file. it seems.."
	else
		if vcs_ignored $i
		then
			echo -n 'ignored file.'
			[ $skipclean -eq 1 ] && echo '  skipping...' && continue
			echo
		elif vcs_clean $i
		then
			echo -n 'clean file.'
			[ $skipclean -eq 1 ] && echo '  skipping...' && continue
			echo
		else
			echo "dirty file..."
		fi
	fi
	dclean-item "$i" "$type"
	ret=$?
	[ $ret -eq 123 ] && exit 123
	if [ $ret -eq 55 ]
	then
		# we're asked to descend.
		# call self again with all the same arguments, but replace the target directory
		for arg in "${dclean_args[@]}"
		do
			new_args+=("`echo "$arg" | sed "s#$dir#$i#"`")
		done
		$0 "${new_args[@]}"
	fi
done
IFS=$OLD_IFS
