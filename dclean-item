#!/bin/bash

# helps you clean up a specific file or directory, called by dclean but can be useful by itself
# $1 filename
# $2 vcs type (optional)

source `dirname $0`/lib-dclean # in case you want to run this standalone

function action_open () {
	echo "Open with?:" #TODO check extension, mimetype, num of lines and give this info. 
	# todo: maybe, if xdg-open was smarter and you could tell it at runtime and it would remember, we could use only that
	# for now, maybe a dclean config with preferred apps?
	echo "  [c]ustom"
	echo "  [C]at"
	echo "  [l]ess"
	echo "  [m]player"
	echo "  [v]im"
	echo "  [Q]iv"
	echo "  [x]dg-open"
	echo "  [q]uit"
	read -n 1 open_with
	case $open_with in
		c) read -p "command: " command ; $command "$target";; 
		C) cat      "$target" ;;
		l) less     "$target" ;;
		m) mplayer  "$target" ;;
		v) vim      "$target" ;;
		q) exit 123 ;;
		Q) qiv      "$target" ;;
		x) xdg-open "$target" ;;
	esac

}

[ -z "$1" -o ! -r "$1" ] && die_error "\$1 must be a readable file/directory. not: $1"
target=$1
type=${2:-normal}
types=(git svn normal)
check_is_in $type "${types[@]}" || die_error "\$2 must be one of: $types (defaults to 'normal'). not: $type"

done= # only set this var to true when the user would be a real weirdo to say he wasn't done.
while [ "$done" != y ]
do
	echo "---------------------------------------------"
	ls -alhd "$target" # TODO make this configurable. maybe a du -hsc of dirs? or ls -alh of contents?
	file "$target"
	[ $type != normal ] && $type status "$target"
	echo "> actions:"
	[ $type != normal ] && echo " [a]dd to $type"
	echo " [b] Buffer to ddm repo (ddm-buffer)"
	echo " [B] Move to ddm repo with fallback to buffer (ddm-move)"
	[ $type != normal ] && echo " [c]ommit in $type"
	[ $type != normal ] && echo " [d]iff" || echo "[d]iff against file"
	[ $type != normal ] && echo " [D]iff against file"
	[ -d "$target" ] && echo ' d[e]scend into directory, to work on the contents'
	[ $type != normal ] && echo " [i]gnore in $type"
	echo " [l]ist contents (unzip -l, ls -l, etc)"
	echo " [m]v"
	echo " [M]eld"
	echo " [r]m"
	[ $type != normal ] && echo " [R]evert in $type (* checkout in git)"
	echo " [o]pen"
	echo " [s]kip (or <Enter>)"
	echo " [q]uit"
	echo " ddm [w]izard"
	if read -n 1
	then
		case "$REPLY" in
			a)
				if [ $type == normal ]
				then
					echo "not under VCS"
				else
					$type add "$target"
				fi
				;;
			b)
				echo "Which repo? server-root selected for your convenience"
				ddm-buffer server-root "$target" && done=y
				;;
			B)
				echo "Which repo? server-root selected for your convenience"
				ddm-move server-root "$target" && done=y
				;;
			c)
				if [ $type == normal ]
				then
					echo "not under VCS"
				else
					$type commit "$target" && done=y
				fi
				;;
			d|D)
				if [ $type != normal -a "$REPLY" == d ]
				then
					$type diff "$target"
				else
					echo "diff with which file/directory?" #TODO keep cachefile in $XDG_DATA_HOME and propose options. show permissions of files
					read diff
					diff "$target" "$diff"
				fi
				;;
			e)
				exit 55
				;;
			i)
				if [ $type == normal ]
				then
					echo "not under VCS"
				elif [ $type == svn ]
				then
					dirname=` dirname  $target`
					basename=`basename $target`
					echo "adding $basename to svn:ignore of $dirname"
					svn propedit --editor-cmd "echo $basename >>" svn:ignore "$dirname" && done=y
				else
					git ignore-wizard $target && done=y
				fi
				;;
			l)
				# TODO: make this a standalone script
				if [[ "$target" =~ .zip ]]
				then
					unzip -l "$target"
				elif [[ "$target" =~ .tar.gz ]]
				then
					tar tzf "$target"
				fi
				if [ -d "$target" ]
				then
					ls -l "$target"
				fi
				;;
			m)
				#TODO cachefile
				echo TODO;;
			M)
				echo "meld with which file/directory?" # use same cachefile as with d/D
				read diff
				meld "$target" "$diff"
				;;
			r)
				echo "rm -r $target ?"
				echo "y: yes"
				echo "Y: yes, and force"
				echo "*: no"
				read -n 1 del
				[ "$del" == y ] && rm -r  "$target" && done=y
				[ "$del" == Y ] && rm -rf "$target" && done=y
				;;
			R)
				if [ $type == normal ]
				then
					echo "not under VCS"
				elif [ $type == svn ]
				then
					$type revert "$target" && done=y
				elif [ $type == git ]
				then
					git checkout "$target" && done=y
				fi
				;;
			q)
				exit 123;;
			o)
				action_open;;
			w)
				ddm-wizard $target;;
			*)
				echo "skipping"
				done=y;;
		esac
		if [ "$REPLY" != 'r' -a ! -r "$target" ];
		then
			echo "It seems like whatever you did caused the file to vanish.  That's fine by me. Skipping..."
			done=y
		fi
	fi
done

echo
echo
echo
echo
